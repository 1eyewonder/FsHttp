[{"uri":"/FsHttp/Configuration.html","title":"Configuration","content":"(**\n---\ntitle: Configuration\ncategory: Documentation\ncategoryindex: 1\nindex: 11\n---\n*)\n\n(*** condition: prepare ***)\n#nowarn \u0022211\u0022\n#r \u0022../FsHttp/bin/Release/net6.0/FsHttp.dll\u0022\nopen FsHttp\n\n\n(**\n## Per request configuration\n\nIt\u0027s possible to configure requests per instance by the use of \u0060config_\u0060\nmethods in any stage of the request definition:\n*)\nhttp {\n    config_timeoutInSeconds 11.1\n    GET \u0022http://myService\u0022\n}\n\n// or\n\nget \u0022http://myService\u0022\n|\u003E Config.timeoutInSeconds 11.1\n\n(**\n## Global configuration\n\nYou can also set config values globally (inherited when requests are created):\n*)\nGlobalConfig.defaults\n|\u003E Config.timeoutInSeconds 11.1\n|\u003E GlobalConfig.set"},{"uri":"/FsHttp/FSI.html","title":"F# Interactive Usage","content":"(**\n---\ntitle: F# Interactive Usage\ncategory: Documentation\ncategoryindex: 1\nindex: 8\n---\n*)\n\n(*** condition: prepare ***)\n#nowarn \u0022211\u0022\n#r \u0022../FsHttp/bin/Release/net6.0/FsHttp.dll\u0022\nopen FsHttp\n\n\n(**\n## FSI Setup\n*)\n\n#r @\u0022nuget: FsHttp\u0022\nopen FsHttp\n\n\n(**\n## FSI Request/Response Formatting\n\nWhen you work in FSI, you can control the output formatting with special keywords.\n\nSome predefined printers are defined in \u0060\u0060\u0060./src/FsHttp/DslCE.fs, module Fsi\u0060\u0060\u0060\n\n*)\n\nhttp {\n    GET \u0022https://reqres.in/api/users\u0022\n    CacheControl \u0022no-cache\u0022\n    print_withResponseBodyExpanded\n}\n"},{"uri":"/FsHttp/HttpClient_Http_Message.html","title":"HttpClient And HttpMessage","content":"(**\n---\ntitle: HttpClient And HttpMessage\ncategory: Documentation\ncategoryindex: 1\nindex: 10\n---\n*)\n\n(*** condition: prepare ***)\n#nowarn \u0022211\u0022\n#r \u0022../FsHttp/bin/Release/net6.0/FsHttp.dll\u0022\nopen FsHttp\n\n\n(**\n## Access HttpClient and HttpMessage\n\nTransform underlying http client and do whatever you feel you gave to do:\n*)\nhttp {\n    GET @\u0022https://reqres.in/api/users?page=2\u0026delay=3\u0022\n    config_transformHttpClient (fun httpClient -\u003E\n        // this will cause a timeout exception\n        httpClient.Timeout \u003C- System.TimeSpan.FromMilliseconds 1.0\n        httpClient)\n}\n\n(**\nTransform underlying http request message:\n*)\nhttp {\n    GET @\u0022https://reqres.in/api/users?page=2\u0026delay=3\u0022\n    config_transformHttpRequestMessage (fun msg -\u003E\n        printfn \u0022HTTP message: %A\u0022 msg\n        msg)\n}"},{"uri":"/FsHttp/index.html","title":"FsHttp Overview","content":"---\r\ntitle: FsHttp Overview\r\nindex: 1\r\n---\r\n\r\n# FsHttp\r\n\r\nFsHttp is a .Net HTTP client library for C# and F#. It aims for describing and executing HTTP requests in convenient ways that can be used in production and interactive environments.\r\n\r\n**FsHttp** is authored by [@ronaldschlenker](https://github.com/ronaldschlenker). Feel free to leave a message.\r\n\r\n[![NuGet Badge](http://img.shields.io/nuget/v/FsHttp.svg?style=flat)](https://www.nuget.org/packages/FsHttp) ![build status](https://github.com/fsprojects/FsHttp/actions/workflows/push-master_pull-request.yml/badge.svg?event=push)\r\n\r\n\r\nA Simple Example\r\n----------------\r\n\r\nAn example in F#:\r\n\r\n\u0060\u0060\u0060fsharp\r\n#r \u0022nuget: FsHttp\u0022\r\n\r\nopen FsHttp\r\n\r\nhttp {\r\n    POST \u0022https://reqres.in/api/users\u0022\r\n    CacheControl \u0022no-cache\u0022\r\n    body\r\n    json \u0022\u0022\u0022\r\n    {\r\n        \u0022name\u0022: \u0022morpheus\u0022,\r\n        \u0022job\u0022: \u0022leader\u0022\r\n    }\r\n    \u0022\u0022\u0022\r\n}\r\n|\u003E Request.send\r\n\u0060\u0060\u0060\r\n\r\nAn example in C#:\r\n\r\n\u0060\u0060\u0060csharp\r\n#r \u0022nuget: FsHttp\u0022\r\n\r\nusing FsHttp.CSharp;\r\n\r\nawait \u0022https://reqres.in/api/users\u0022.Post()\r\n    .CacheControl(\u0022no-cache\u0022)\r\n    .Body()\r\n    .Json(@\u0022\r\n        {\r\n            \u0022\u0022name\u0022\u0022: \u0022\u0022morpheus\u0022\u0022,\r\n            \u0022\u0022job\u0022\u0022: \u0022\u0022leader\u0022\u0022\r\n        }\r\n    \u0022)\r\n    .SendAsync();\r\n\u0060\u0060\u0060\r\n\r\n\r\nFurther documentation\r\n---\r\n\r\nHave a look at the [Integration Tests](https://github.com/fsprojects/FsHttp/tree/master/src/Tests) that show various library details.\r\n"},{"uri":"/FsHttp/Migrations.html","title":"Migrations","content":"(**\n---\ntitle: Migrations\ncategory: Documentation\ncategoryindex: 1\nindex: 9\n---\n*)\n\n(**\n## Migrations\n\n### To v9 (Breaking Changes)\n\n* \u0060http...\u0060 Builders: There is now only a single \u0060http\u0060 builder, that is equivalent to the former \u0060httpLazy\u0060 builder. To achieve the behaviour of the removed builders, please use:\n* \u0060httpLazy\u0060 -\u003E \u0060http { ... }\u0060\n* \u0060http\u0060 -\u003E \u0060http { ... } |\u003E Request.send\u0060\n* \u0060httpAsync\u0060 -\u003E \u0060http { ... } |\u003E Request.sendAsync\u0060\n* \u0060httpLazyAsync\u0060 -\u003E \u0060http { ... } |\u003E Request.toAsync\u0060\n* \u0060httpMessage\u0060 -\u003E \u0060http { ... } |\u003E Request.toMessage\u0060\n* see also: [https://github.com/fsprojects/FsHttp/blob/master/src/Tests/BuildersAndSignatures.fs](Tests in BuildersAndSignatures.fs)\n* Renamed type \u0060LazyHttpBuilder\u0060 -\u003E \u0060HttpBuilder\u0060\n* Renamed \u0060Request.buildAsync\u0060 -\u003E \u0060Request.toAsync\u0060\n* Removed \u0060send\u0060 and \u0060sendAsync\u0060 builder methods\n* Changed request and response printing (mostly used in FSI)\n* Printing related custom operations change in names and behaviour\n* \u0060Dsl\u0060 / \u0060DslCE\u0060 namespaces: There is no need for distinction of both namespaces. It is now sufficient to \u0060open FsHttp\u0060 only.\n* The \u0060HttpBuilder\u003C\u0027context\u003E\u0060 is replaced by \u0060IBuilder\u003C\u0027self\u003E\u0060, so that the CE methods work directly on the \u0060HeaderContext\u0060, \u0060BodyContext\u0060, and \u0060MultipartContext\u0060 directly. This simplifies things like mixing Dsl and DslCE, pre-configuring and chaining requests.\n* The global configuration is now in the \u0060FsHttp.GlobalConfig\u0060 module. The \u0060Config\u0060 module is only for functions on request contexts.\n* QueryParams is \u0060(string * obj) list\u0060 now\n* Use of System.Text.Json as a standard JSON library and created separate Newtonsoft and FSharp.Data JSON packages.\n* Dropped support for .Net Standard 2.0\n* Smaller breaking changes\n\n### To \u003E v10\n\nSee README.md\n\n*)"},{"uri":"/FsHttp/Overview.html","title":"Overview","content":"(**\n---\ntitle: Overview\ncategory: Documentation\ncategoryindex: 1\nindex: 2\n---\n*)\n\n(*** condition: prepare ***)\n#nowarn \u0022211\u0022\n#r \u0022../FsHttp/bin/Release/net6.0/FsHttp.dll\u0022\nopen FsHttp\n\n\n\n(**\n## Installing\n*)\n// Reference the \u0027FsHttp\u0027 package from NuGet in your script or project\n#r \u0022nuget: FsHttp\u0022\n\n// Opening \u0027FsHttp\u0027 is sufficient (no need for FsHttp.DSL or others anymore).\nopen FsHttp\n\n(**\n## Performing a GET request:\n*)\nhttp {\n    GET \u0022https://mysite\u0022\n    AcceptLanguage \u0022en-US\u0022\n}\n|\u003E Request.send\n\n(**\nThe request is sent synchronously in the example above. See (TODO: \u0060async\u0060 / \u0060task\u0060) section to see how requests and responses can be processed using \u0060async\u0060 or \u0060task\u0060 abstractions.\n\n\u003E **For production use, it is recommended using \u0060async\u0060 or \u0060task\u0060 based functions!**\n\n## Performing a POST request with JSON object content:\n*)\nhttp {\n    POST \u0022https://mysite\u0022\n\n    body\n    jsonSerialize\n        {|\n            name = \u0022morpheus\u0022\n            job = \u0022leader\u0022\n        |}\n}\n|\u003E Request.send\n\n(**\nThere are more ways of how requests definition can look: See (here)TODO for an explanation of how to multipart, form data, file upload, streaming, and more.\n\n## Process response content as JSON:\n*)\n\n// Assume this returns: { \u0022name\u0022: \u0022Paul\u0022; \u0022age\u0022: 54 }\nlet name,age =\n    http {\n        GET \u0022https://mysite\u0022\n        AcceptLanguage \u0022en-US\u0022\n    }\n    |\u003E Request.send\n    |\u003E Response.toJson\n    |\u003E fun json -\u003E json?name.GetString(), json?age.GetInt32()\n\n(**\n\n**FSharp.Data and Newtonsoft.Json**\n\nPer default, \u0060System.Text.Json\u0060 is used as backend for dealing with JSON responses. If prefer \u0060FSharp.Data\u0060 or \u0060Newtonsoft.Json\u0060, you can use the extension packages (see here(TODO)).\n\n## Configuration\n*)\n\n// A configuration per request\nhttp {\n    GET \u0022https://mysite\u0022\n    AcceptLanguage \u0022en-US\u0022\n\n    // This can be placed anywhere in the request definition.\n    config_timeoutInSeconds 10.0\n}\n|\u003E Request.send\n\n(**\nThere are many ways of configuring a request - from simple config values like above, to changing or replacing the underlying \u0060System.Net.Http.HttpClient\u0060 and \u0060System.Net.Http.HttpRequestMessage\u0060 (have a look here()TODO).\n\nIt is also possible to set configuration values globally:\n*)\n\nGlobalConfig.defaults\n|\u003E Config.timeoutInSeconds 11.1\n|\u003E GlobalConfig.set"},{"uri":"/FsHttp/Requesting_FormData.html","title":"POST Form Data","content":"(**\n---\ntitle: POST Form Data\ncategory: Documentation\ncategoryindex: 2\nindex: 5\n---\n*)\n\n(*** condition: prepare ***)\n#nowarn \u0022211\u0022\n#r \u0022../FsHttp/bin/Release/net6.0/FsHttp.dll\u0022\nopen FsHttp\n\n\n\n(**\n## Sending URL-Encoded Form\n*)\nhttp {\n    POST \u0022https://mysite\u0022\n    body\n    formUrlEncoded [\n        \u0022key_1\u0022, \u0022Data 1\u0022\n        \u0022key_2\u0022, \u0022Data 2\u0022\n    ]\n}\n|\u003E Request.send"},{"uri":"/FsHttp/Requesting_JSON.html","title":"Sending JSON","content":"(**\n---\ntitle: Sending JSON\ncategory: Documentation\ncategoryindex: 2\nindex: 3\n---\n*)\n\n(*** condition: prepare ***)\n#nowarn \u0022211\u0022\n#r \u0022../FsHttp/bin/Release/net6.0/FsHttp.dll\u0022\nopen FsHttp\n\n\n\n(**\n## JSON String\n*)\nhttp {\n    POST \u0022https://mysite\u0022\n\n    body\n    json \u0022\u0022\u0022\n    {\n        \u0022name\u0022 = \u0022morpheus\u0022,\n        \u0022job\u0022 = \u0022leader\u0022,\n        \u0022age\u0022: %d\n    }\n    \u0022\u0022\u0022\n}\n|\u003E Request.send\n\n\n(**\n**Parametrized JSON:**\n\nWhen the JSON content needs to be parametrized, \u0060sprintf\u0060 function is a useful tool. Compared to interpolated strings, the curly braces - which are a key character in JSON - don\u0027t have to be escaped:\n*)\nlet sendRequestWithSprintf age =\n    http {\n        POST \u0022https://mysite\u0022\n\n        body\n        json (sprintf \u0022\u0022\u0022\n        {\n            \u0022name\u0022 = \u0022morpheus\u0022,\n            \u0022job\u0022 = \u0022leader\u0022,\n            \u0022age\u0022: %d\n        }\n        \u0022\u0022\u0022 age)\n    }\n    |\u003E Request.send\n\n\n(**\n**Using an interpolated string:**\n*)\nlet sendRequestWithInterpolatedString age =\n    http {\n        POST \u0022https://mysite\u0022\n\n        body\n        json $\u0022\u0022\u0022\n        {{\n            \u0022name\u0022 = \u0022morpheus\u0022,\n            \u0022job\u0022 = \u0022leader\u0022,\n            \u0022age\u0022: {age}\n        }}\n        \u0022\u0022\u0022\n    }\n    |\u003E Request.send\n\n(**\n## Sending records or objects as JSON\n*)\nhttp {\n    POST \u0022https://mysite\u0022\n\n    body\n    jsonSerialize\n        {|\n            name = \u0022morpheus\u0022\n            job = \u0022leader\u0022\n        |}\n}\n|\u003E Request.send\n\n(**\n\u003E It is also possible to pass serializer settings using the \u0060jsonSerializeWith\u0060 operation.\n*)"},{"uri":"/FsHttp/Requesting_Multipart_Files.html","title":"Multipart and File Upload","content":"(**\n---\ntitle: Multipart and File Upload\ncategory: Documentation\ncategoryindex: 2\nindex: 4\n---\n*)\n\n(*** condition: prepare ***)\n#nowarn \u0022211\u0022\n#r \u0022../FsHttp/bin/Release/net6.0/FsHttp.dll\u0022\nopen FsHttp\n\n\n\n(**\n## Sending Multipart Form-Data\n\n**Performing a POST multipart request / uploading a file:**\n*)\nhttp {\n    POST \u0022https://mysite\u0022\n\n    // use \u0022multipart\u0022 keyword (instead of \u0027body\u0027) to start specifying parts\n    multipart\n    textPart \u0022the-actual-value_1\u0022 \u0022the-part-name_1\u0022\n    textPart \u0022the-actual-value_2\u0022 \u0022the-part-name_2\u0022\n    filePart \u0022super.txt\u0022 \u0022F# rocks!\u0022\n}\n|\u003E Request.send\n\n(**\n## Further Readings\n\n\u003E Have a look at the [https://github.com/fsprojects/FsHttp/blob/master/src/Tests/Multipart.fs](multipart tests) for more examples using multipart.\n*)"},{"uri":"/FsHttp/Response_Handling.html","title":"Response Handling","content":"(**\n---\ntitle: Response Handling\ncategory: Documentation\ncategoryindex: 1\nindex: 6\n---\n*)\n\n(*** condition: prepare ***)\n#nowarn \u0022211\u0022\n#r \u0022../FsHttp/bin/Release/net6.0/FsHttp.dll\u0022\nopen FsHttp\n\n\n(**\n## Response Content Transformations\n\nThere are several ways transforming the content of the returned response to\nsomething like text or JSON:\n\nSee also: [Response](reference/fshttp-response.html)\n*)\nhttp {\n    POST \u0022https://reqres.in/api/users\u0022\n    CacheControl \u0022no-cache\u0022\n    body\n    json \u0022\u0022\u0022\n    {\n        \u0022name\u0022: \u0022morpheus\u0022,\n        \u0022job\u0022: \u0022leader\u0022\n    }\n    \u0022\u0022\u0022\n}\n|\u003E Request.send\n|\u003E Response.toJson\n\n\n\n(**\n## JSON dynamic processing:\n*)\n\nhttp {\n    GET @\u0022https://reqres.in/api/users?page=2\u0026delay=3\u0022\n}\n|\u003E Request.send\n|\u003E Response.toJson\n|\u003E fun json -\u003E json?page.GetInt32()\n\n\n\n(**\n## JsonSerializerOptions / Using Tarmil-FSharp.SystemTextJson\n\nFSharp.SystemTextJson enables JSON (de)serialization of F# types like tuples, DUs and others.\nTo do so, use the \u0060JsonSerializeWith\u0060 or one of the \u0060Response.toJsonWith\u0060 functions and pass\n\u0060JsonSerializerOptions\u0060. Instead, it\u0027s also possible to globally configure the \u0060JsonSerializerOptions\u0060\nthat will be used as default for any request where JSON (de)serialization is involved:\n*)\n\n#r \u0022nuget: FSharp.SystemTextJson\u0022\n\n// ---------------------------------\n// Prepare global JSON configuration\n// ---------------------------------\n\nopen System.Text.Json\nopen System.Text.Json.Serialization\n\nFsHttp.GlobalConfig.Json.defaultJsonSerializerOptions \u003C-\n    let options = JsonSerializerOptions()\n    options.Converters.Add(JsonFSharpConverter())\n    options\n\n// -----------------\n// ... make requests\n// -----------------\n\ntype Person = { name: string; age: int; address: string option }\nlet john = { name =\u0022John\u0022; age = 23; address = Some \u0022whereever\u0022 }\n\nhttp {\n    POST \u0022loopback body\u0022\n    body\n    jsonSerialize john\n}\n|\u003E Request.send\n|\u003E Response.deserializeJson\u003CPerson\u003E\n|\u003E fun p -\u003E p.address = john.address // true"},{"uri":"/FsHttp/URLs_and_Query_Params.html","title":"URLs and Query Params","content":"(**\n---\ntitle: URLs and Query Params\ncategory: Documentation\ncategoryindex: 1\nindex: 7\n---\n*)\n\n(*** condition: prepare ***)\n#nowarn \u0022211\u0022\n#r \u0022../FsHttp/bin/Release/net6.0/FsHttp.dll\u0022\nopen FsHttp\n\n\n\n(**\n## URLs (Line Breaks and Comments):\n\nYou can split URL query parameters or comment lines out by using F# line-comment syntax. Line breaks and trailing or leading spaces will be removed:\n*)\n\nhttp {\n    GET \u0022https://mysite\n            ?page=2\n            //\u0026skip=5\n            \u0026name=Hans\u0022\n}\n|\u003E Request.send\n\n\n(**\n## Query Parameters\n\nIt\u0027s also possible to specify query params in a list:\n*)\n\nhttp {\n    GET \u0022https://mysite\u0022\n    query [\n        \u0022page\u0022, 2\n        \u0022name\u0022, \u0022Hans\u0022\n    ]\n}\n|\u003E Request.send\n\n(**\n**Please note:** Using F# version 5 or lower, an upcast of the parameter values is needed!\n*)"}]